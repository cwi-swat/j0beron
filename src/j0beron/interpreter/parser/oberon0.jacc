%package j0beron.parser
%class Oberon0Parser
%interface Oberon0Tokens
%semantic j0beron.ast.ASTNode 
%start module

%token <Int> INT
%token INTEGER BOOLEAN IDENT
%token '*' DIV MOD '&' '+' '-' OR '='  '#' '<' LEQ '>' GEQ '.' ',' ':'
%token ')' ']' OF THEN DO '(' '[' '~' BECOMES ';' END
%token ELSE ELSIF IF WHILE ARRAY RECORD CONST TYPE VAR PROCEDURE BEGIN MODULE

%left '+' '-' OR
%right '*' DIV MOD '&'
%left UMIN UPLUS TILDE

%type <Int> INTEGER
%type <Ident> IDENT 

%type <Expr> expr comp
%type <Exprs> exprs exprs1
%type <Selector> selector
%type <Selectors> selectors
%type <Actuals> actuals
%type <Stat> stat								
%type <ElsIfs> elsifs			
%type <ElsIf> elsif
%type <Else> else
%type <Stats> stats
%type <Type> type
%type <Field> field
%type <Fields> fields
%type <Idents> idents
%type <FPSect> fpsect
%type <FPSects> fpsects
%type <Formals> formals
%type <Body> body
%type <Proc> proc
%type <ConstSect> constsect
%type <ConstDecls> constdecls
%type <ConstDecl> constdecl
%type <TypeSect> typesect
%type <TypeDecls> typedecls
%type <TypeDecl	> typedecl	
%type <VarSect> varsect
%type <VarDecls> vardecls
%type <VarDecl> vardecl
%type <Procs> procs
%type <Decls> decls
%type <Module> module

%{
import j0beron.ast.expr.*;
import j0beron.ast.stat.*;
import j0beron.ast.decl.*;
import j0beron.ast.type.*;

%}

%%

 selector: '.' IDENT 			{ $$ = new Member($2); }
         | '[' expr ']' 		{ $$ = new Subscript($2); }
         ;

 selectors
 		 : selector selectors	{ $$ = new Selectors($1, $2); }
 		 | /* empty */			{ $$ = new Selectors(); }
 		 ;

 actuals : '(' exprs ')'		{ $$ = new Actuals($2); }
 		 | /* empty */			{ $$ = new Actuals(); }
		 ;

 exprs   : /* empty */			{ $$ = new Exprs(); }
         |  exprs1				{ $$ = new Exprs($1); }
         ;

 exprs1  : comp					{ $$ = new Exprs($1); }
		 | comp ',' exprs1		{ $$ = new Exprs($1, $3); }
		 ;


 stat    : IDENT selectors BECOMES expr
								{ $$ = new Assign($1, $2, $4); }
		 | IDENT actuals		{ $$ = new Call($1, $2); }
		 | IF comp THEN stats elsifs else END
		 						{ $$ = new IfThenElse($2, $4, $5, $6); }
		 | IF comp THEN stats elsifs END
		 						{ $$ = new IfThenElse($2, $4, $5); }
		 | WHILE comp DO stats END 
		 						{ $$ = new WhileDo($2, $4); }
		 ;
								
 elsifs	 : elsif elsifs 		{ $$ = new ElsIfs($1, $2); }
		 | /* empty */			{ $$ = new ElsIfs(); }
		 ;
			
 elsif   : ELSIF comp THEN stats { $$ = new ElsIf($2, $4); }
 		 ;

 else	 : ELSE stats			{ $$ = new Else($2); }
		 ;

 stats	 : stat ';' stats		{ $$ = new Stats($1, $3); }
         | stat					{ $$ = new Stats($1); }
         ; 

 expr	 : '~' expr	%prec TILDE	{ $$ = new Not($2); }
		 | '+' expr	%prec UPLUS { $$ = new Pos($2); }
		 | '-' expr	%prec UMIN  { $$ = new Neg($2); }
		 | expr '*' expr		{ $$ = new Mul($1, $3); }
		 | expr DIV expr 		{ $$ = new Div($1, $3); }
		 | expr MOD expr		{ $$ = new Mod($1, $3); }
		 | expr '&' expr		{ $$ = new And($1, $3); }
		 | expr '+' expr		{ $$ = new Add($1, $3); }
		 | expr '-' expr		{ $$ = new Sub($1, $3); }
		 | expr OR expr			{ $$ = new Or($1, $3); }
		 | INT					{ $$ = $1; }
		 | IDENT selectors		{ $$ = new Lookup($1, $2); }
		 | '(' comp ')'			{ $$ = $2; }
		 ;
		 
 comp    : expr '=' expr		{ $$ = new Eq($1, $3); }
		 | expr '#' expr		{ $$ = new NEq($1, $3); }
		 | expr '>' expr		{ $$ = new GT($1, $3); }
		 | expr '<' expr		{ $$ = new LT($1, $3); }
		 | expr GEQ expr		{ $$ = new GEq($1, $3); }
		 | expr LEQ expr		{ $$ = new LEq($1, $3); }
		 | expr					{ $$ = $1; }
		 ;

 type	 : IDENT				{ $$ = new User($1); }
		 | INTEGER				{ $$ = new IntType(); }
		 | BOOLEAN				{ $$ = new BoolType(); }
		 | ARRAY comp OF type	{ $$ = new Array($2, $4); }
		 | RECORD fields END	{ $$ = new Record($2); }
		 ;
 
 field	 : idents ':' type		{ $$ = new Field($1, $3); }
 		 ;
 
 fields  : field ';' fields		{ $$ = new Fields($1, $3); }
 		 | field				{ $$ = new Fields($1); }
 		 ;
 		 
 idents  : IDENT ',' idents		{ $$ = new Idents($1, $3); }
 		 | IDENT				{ $$ = new Idents($1); }
 		 ;
 
 fpsect  : idents ':' type		{ $$ = new FPSect(false, $1, $3); }
 		 | VAR idents ':' type	{ $$ = new FPSect(true, $2, $4); }
 		 ;
 		
 fpsects : fpsect ';' fpsects	{ $$ = new FPSects($1, $3); }
 		 | fpsect				{ $$ = new FPSects($1); }
 		 ;
 
 formals : '(' ')'				{ $$ = new Formals(); }
 		 | '(' fpsects ')'		{ $$ = new Formals($2); }
 		 | /* empty */			{ $$ = new Formals(); }
 		 ;
 		 
 body	 : BEGIN stats			{ $$ = new Body($2); }
 		 ;
 		 
 proc    : PROCEDURE IDENT formals ';' decls body END IDENT ';'
 								{ $$ = new Proc($2, $3, $5, $6); }
		 ;
		 
 constsect
         : CONST constdecls 	{ $$ = new ConstSect($2); }
  	     | /* empty	*/			{ $$ = new ConstSect(); }
  	     ;
 
 constdecls  
 		 : constdecl constdecls	{ $$ = new ConstDecls($1, $2); }
         | /* empty */			{ $$ = new ConstDecls(); }
         ;
         
 constdecl   
 		 : IDENT '=' comp ';'	{ $$ = new ConstDecl($1, $3); }
 		 ;
 		 
 typesect: TYPE typedecls		{ $$ = new TypeSect($2); }
  	     | /* empty	*/			{ $$ = new TypeSect(); }
  	     ;
 
 typedecls  
         : typedecl typedecls	{ $$ = new TypeDecls($1, $2); }
         | /* empty */			{ $$ = new TypeDecls(); }
         ;
         
 typedecl: IDENT '=' type ';'	{ $$ = new TypeDecl($1, $3); }
 		 ;
 	   
 varsect: VAR vardecls			{ $$ = new VarSect($2); }
  	     | /* empty	*/			{ $$ = new VarSect(); }
  	     ;
 
 vardecls: vardecl vardecls		{ $$ = new VarDecls($1, $2); }
         | /* empty */			{ $$ = new VarDecls(); }
         ;
         
 vardecl : idents ':' type ';'	{ $$ = new VarDecl($1, $3); }
 		 ;
 	   						 	 

 procs	 : proc procs			{ $$ = new Procs($1, $2); }
 		 | /* empty */			{ $$ = new Procs(); }
 		 ;

 decls   : constsect typesect varsect procs
 								{ $$ = new Decls($1, $2, $3, $4); }
 		 ;
 
 module  : MODULE IDENT ';' decls body END IDENT '.'
 								{ result = new Module($2, $4, $5);}
 		 ;
 
%%
private Oberon0Lexer lexer; 

private Module result;

public Module getResult() {
  return result;
}

public Oberon0Parser(Oberon0Lexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) { 
  System.err.println(msg); 
}